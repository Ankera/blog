/**
 * 二叉搜索树
 * 
 * 
 * 平衡二叉搜索树AVL
 * 平衡因子: 某结点的左右子树的高度差
 * 特点：
 *  1. 每个结点的平衡因子只可能是-1，0，1，如果超过1，这称为失衡
 *  2. 每个结点左右子树高度差不超过1
 * 当不平衡时，左旋或者右旋
 * 
 * 
 * Balance Tree 平衡
 * B树
 *  是一种平衡的多路搜索树，多用于文件系统，数据库实现
 * 特点:
 * 1. 1个结点可以存储超过2个元素，可以拥有超过2个子结点
 * 2. 拥有二叉搜索树的一些性质
 * 3. 平衡，每个结点的所有子树高度一致
 * 
 * m阶B树的性质
 * 假设一个结点存储的元素个数是x，
 * 1. 根结点： 1 <= x <= m -1;
 * 2. 非根结点： Math.ceil(m/2) - 1 <= x <= m - 1;   向上取整
 * 比如 m = 3, 1 <= y <= 2,
 * 比如 m = 4, 1 <= y <= 3,
 * 比如 m = 5, 2 <= y <= 4,
 * 比如 m = 6, 2 <= y <= 5,
 * 比如 m = 7, 3 <= y <= 6,
 * 
 * 如果有子结点，子结点个数 y = x + 1;
 * 根结点 2 <= y <= m;
 * 非根结点 Math.ceil(m/2) <= y <= m;
 * 比如 m = 3, 2 <= y <= 3, 因此也可以成为(2,3)树， 2-3树；
 * 比如 m = 4, 2 <= y <= 4, 因此也可以成为(2,4)树， 2-3-4树；
 * 比如 m = 5, 3 <= y <= 5, 因此也可以成为(3,5)树， 3-5树；
 * 比如 m = 6, 3 <= y <= 6, 因此也可以成为(3,6)树， 3-6树；
 * 比如 m = 7, 4 <= y <= 7, 因此也可以成为(4,7)树， 4-7树；
 * 
 * 3阶B树就是一个结点最多有3个子结点
 * 4阶B树就是一个结点最多有4个子结点
 * 
 * 删除
 * 假如删除的元素在非叶子节点，
 * 1. 先找到前驱或后继元素，覆盖所需删除的元素
 * 2. 再把前驱或后继元素删除
 * 
 * 下溢解决
 * 
 */ 


/**
 * 红黑树必须满足以下5个条件
 * 1. 结点是 RED 或者 BLACK
 * 2. 根结点是 BLACK
 * 3. 叶子结点(外部结点，空结点)必须是 BLACK
 * 4. RED 结点的子结点都是 BLACK
 * 5. 从任一结点到叶子结点的所有路径都包含相同数目的 BLACK 结点
 * 
 * 
 * 所有插入的点默认是红色
 * 变换规则
 * 1. 变颜色的情况
 * 当前结点的父亲是红色， 且它的祖父结点的另一个子结点也是红色（叔叔结点）
 *      a. 把父结点设为黑色
 *      b. 把叔叔结点设为黑色
 *      c. 把祖父结点设置红色
 *      d. 把指针定义到祖父结点当前要操作的
 * 2. 左旋
 * 当前父结点是红色，叔叔结点是黑色，且当前结点是右子树，左旋以父结点做为左旋
 * 3. 右旋
 * 当前父结点是红色，叔叔是黑色的时候，且当前结点是左子树
 *      a. 把父结点变为黑色
 *      b. 把祖父结点变为红色
 *      c. 以祖父结点为左旋
 */