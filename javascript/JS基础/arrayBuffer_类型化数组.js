/**
 * 查看文章
 * https://juejin.im/post/5b93dadaf265da0a857a58a3#heading-14
 * 
 * 
 * 
 * 类型化数组 诞生背景
 * 
 * 这要从WebGL项目的诞生说起，所谓WebGL，就是指浏览器与显卡之间的通信接口，
 * 为了满足JavaScript与显卡之间大量的、实时的数据交换，它们之间的数据通信必须是二进制的，
 * 而不能是传统的文本格式。
 * 
 * 比如，以文本格式传递一个32位整数，两端的JavaScript脚本与显卡都要进行格式转化，
 * 将非常耗时。这时要是存在一种机制，可以像C语言那样，直接操作字节，
 * 然后将4个字节的32位整数，以二进制形式原封不动地送入显卡，脚本的性能就会大幅提升。
 * 
 * 类型化数组（Typed Array）就是在这种背景下诞生的。
 * 它很像C语言的数组，允许开发者以数组下标的形式，直接操作内存。
 * 有了类型化数组以后，JavaScript的二进制数据处理功能增强了很多，
 * 接口之间完全可以用二进制数据通信。
 */

 // 分配内存
 // ArrayBuffer 是一个构造函数，允许我们实例化数组缓冲区，
 // 数组缓冲区可以理解为是一段连续的内存区域。 由于我们构造函数传入的参数是空，所以生成的 buffer 指向的内存长度是 0 字节，没有意义。

 // 类型化数组是建立在ArrayBuffer对象的基础上的。它的作用是，分配一段可以存放数据的连续内存区域
 // 创建一段 32 个字节长度的内存区域。
var buf = new ArrayBuffer(32);

// ArrayBuffer对象有一个slice方法，允许将内存区域的一部分，拷贝生成一个新的ArrayBuffer对象。
// slice方法其实包含两步，第一步是先分配一段新内存，第二步是将原来那个ArrayBuffer对象拷贝过去。
var newBuf = buf.slice(0, 4);


/**
 * 数组视图
 *      Int8Array       8位有符号整数，占 1 字节
 *      Uint8Array      8位无符号整数，占 1 字节
 *      Int16Array      16位有符号整数，占 2 字节
 *      Uint16Array     16位无符号整数，占 2 字节
 *      Int32Array      32位有符号整数，占 4 字节
 *      Uint32Array     32位无符号整数，占 4 字节
 *      Float32Array    32位浮点数，占 4 个字节
 *      Float64Array    64位浮点数，占 8 个字节
 */

 var int8Array = new Int8Array(buf);
 
console.log(int8Array)

